{
  "projectName": "AI-Powered CRM",
  "description": "Agentic and modular AI-powered CRM with FastAPI backend and Next.js frontend",
  "preferences": {
    "general": {
      "maxLines": 100,
      "useSemicolon": false,
      "useDoubleQuotes": true,
      "indentationSpaces": 2,
      "maxLineLength": 88,
      "preferAsync": true,
      "commentStyle": "detailed"
    },
    "organization": {
      "folderStructure": "domain-driven",
      "useBarrelFiles": true,
      "separateTypesIntoFiles": true,
      "groupRelatedFiles": true
    },
    "style": {
      "pythonStyle": {
        "formatter": "black",
        "linter": "flake8",
        "sortImports": "isort",
        "preferTypedFunctions": true,
        "useTypeHints": true,
        "useDocstrings": true,
        "docstringFormat": "google",
        "useAsyncAwait": true,
        "functionNamingConvention": "snake_case",
        "classNamingConvention": "PascalCase",
        "constantNamingConvention": "UPPER_CASE",
        "fileNamingConvention": "snake_case"
      },
      "typescript": {
        "preferConstOverLet": true,
        "preferTyped": true,
        "preferNamedExports": true,
        "useTypeInterfaces": true,
        "preferFunctionalComponents": true,
        "useTailwind": true,
        "componentNamingConvention": "PascalCase",
        "utilNamingConvention": "camelCase",
        "typeNamingConvention": "PascalCase",
        "fileNamingConvention": "kebab-case",
        "preferPromises": true,
        "exportPatterns": "named"
      }
    }
  },
  "rules": {
    "general": [
      "Use appropriate type systems (TypeScript for frontend, Python type hints for backend)",
      "Document all functions, classes and modules",
      "Implement error handling for all external API calls",
      "Use environment variables for configuration",
      "Follow the DRY (Don't Repeat Yourself) principle",
      "Implement proper logging with context",
      "Prefer explicit over implicit code",
      "Write self-documenting code with descriptive variable and function names"
    ],
    "python": [
      "Use Python 3.9+ type hints throughout the backend codebase",
      "Use Black's default line length of 88 characters",
      "Document all functions, classes and modules using Google-style docstrings",
      "Implement error handling for all external API calls",
      "Use python-dotenv for environment variables",
      "Follow PEP 8 style guidelines",
      "Use dependency injection with FastAPI",
      "Implement proper logging"
    ],
    "typescript": [
      "Use TypeScript for all frontend code",
      "Use ES6+ features",
      "Use interface or type for type definitions",
      "Use functional components with hooks",
      "Use appropriate React imports (avoid * imports)",
      "Use named exports instead of default exports when possible",
      "Use async/await for asynchronous code",
      "Use proper TypeScript typing for state and props"
    ],
    "fastapi": [
      "Use Pydantic v2 for request/response models and validation",
      "Implement proper dependency injection using FastAPI Depends",
      "Group API endpoints by feature domain",
      "Implement proper error handling with HTTPException",
      "Use appropriate status codes for responses",
      "Implement request validation using Pydantic models",
      "Document API endpoints using FastAPI's built-in OpenAPI support",
      "Implement middleware for common cross-cutting concerns",
      "Use background tasks for non-critical operations"
    ],
    "nextjs": [
      "Use App Router for routing",
      "Use server components where appropriate",
      "Implement proper error handling for client components",
      "Use Next.js Image component for images",
      "Implement proper loading states",
      "Use Next.js API routes for server-side operations",
      "Use environment variables for configuration",
      "Implement proper metadata for SEO",
      "Use Link component for internal navigation",
      "Implement proper error boundaries"
    ],
    "reactComponents": [
      "Create small, focused components",
      "Use TypeScript for component props",
      "Use React Query for server state management",
      "Use Zod for form validation with React Hook Form",
      "Use Radix UI components as base components",
      "Use shadcn/ui pattern to customize Radix components",
      "Use CSS Modules or Tailwind for styling",
      "Implement proper error handling for components",
      "Use proper loading states for async operations",
      "Implement proper accessibility features"
    ],
    "ui": [
      "Use Tailwind CSS for styling",
      "Use Radix UI components for base UI elements",
      "Implement responsive design for all components",
      "Use ARIA attributes for accessibility",
      "Use Framer Motion for animations",
      "Implement proper dark mode support",
      "Use proper color contrast for accessibility",
      "Use consistent spacing and sizing",
      "Implement proper loading states for UI elements",
      "Use proper error states for UI elements"
    ],
    "forms": [
      "Use React Hook Form for form state management",
      "Use Zod for form validation",
      "Implement proper error states for form fields",
      "Use proper label associations for form fields",
      "Implement proper keyboard navigation for forms",
      "Use proper focus management for forms",
      "Implement proper form submission handling",
      "Use proper loading states for form submission",
      "Implement proper error handling for form submission",
      "Use proper validation feedback for form fields"
    ],
    "dataFetching": [
      "Use React Query for server state management",
      "Implement proper error handling for data fetching",
      "Use proper loading states for data fetching",
      "Implement proper caching for data fetching",
      "Use proper retry logic for failed data fetching",
      "Implement proper pagination for data fetching",
      "Use proper typing for data fetching responses",
      "Implement proper optimistic updates for mutations",
      "Use proper invalidation for stale data",
      "Implement proper offline handling for data fetching"
    ],
    "security": [
      "Use passlib with bcrypt for password hashing on backend",
      "Implement JWT authentication",
      "Use HTTPS for all communications",
      "Sanitize all user inputs",
      "Implement proper role-based access control",
      "Store sensitive information using environment variables",
      "Implement rate limiting for authentication attempts",
      "Use proper session management",
      "Follow the principle of least privilege",
      "Validate all client-side data on the server"
    ],
    "database": [
      "Use Supabase client for database operations",
      "Implement proper database models with type hints",
      "Use transactions for multi-step database operations",
      "Implement proper data migration strategies",
      "Use connection pooling for database connections",
      "Implement data validation before storage",
      "Use appropriate data types for each field",
      "Implement proper error handling for database operations",
      "Use Supabase RLS (Row Level Security) for data access control",
      "Implement soft deletes for important data"
    ],
    "ai": [
      "Use LangChain for orchestrating LLM operations",
      "Implement LangGraph for complex agent workflows",
      "Use structured output with Pydantic models for AI responses",
      "Implement proper error handling for AI operations",
      "Use retry logic for OpenAI API calls",
      "Implement token usage tracking",
      "Use batching for multiple AI operations when possible",
      "Keep prompts modular and maintainable",
      "Log AI interactions for debugging",
      "Implement fallbacks for AI service disruptions"
    ],
    "communications": [
      "Use SendGrid for email operations",
      "Use Twilio for SMS and call functionality",
      "Implement proper error handling for communication services",
      "Use templates for common communication patterns",
      "Implement rate limiting for communication APIs",
      "Log all communications (without sensitive data)",
      "Implement proper retry logic for failed communications",
      "Use asynchronous sending for non-critical communications",
      "Implement proper feedback mechanisms for communication status",
      "Follow anti-spam best practices"
    ],
    "state": [
      "Use React Query for server state",
      "Use React hooks for component state",
      "Implement proper state serialization for persistence",
      "Use proper state initialization",
      "Implement proper state updates",
      "Use proper state typing",
      "Implement proper state synchronization",
      "Use proper state reset mechanisms",
      "Implement proper state persistence",
      "Use proper state sharing between components"
    ],
    "testing": {
      "backend": [
        "Use pytest for unit testing",
        "Use pytest-asyncio for testing async code",
        "Implement integration tests with httpx",
        "Mock external dependencies in tests",
        "Use test fixtures for common test setup",
        "Implement proper test coverage reporting",
        "Test edge cases and error scenarios",
        "Implement proper test documentation",
        "Use proper test naming conventions",
        "Implement proper test cleanup"
      ],
      "frontend": [
        "Use React Testing Library for component testing",
        "Use Jest for unit testing",
        "Implement snapshot testing for UI components",
        "Mock external dependencies in tests",
        "Test UI interactions",
        "Implement accessibility testing",
        "Test responsive behavior",
        "Test error states",
        "Test loading states",
        "Implement end-to-end testing with Cypress or Playwright"
      ]
    },
    "monitoring": [
      "Use Sentry for error tracking",
      "Implement proper logging throughout the application",
      "Use structured logging (JSON)",
      "Implement proper error context in logs",
      "Use proper log levels",
      "Implement proper performance monitoring",
      "Log all critical operations",
      "Implement proper alerting for critical errors",
      "Use proper request tracing",
      "Implement proper health checks"
    ],
    "accessibility": [
      "Use semantic HTML elements",
      "Implement proper ARIA attributes",
      "Ensure proper color contrast",
      "Implement proper keyboard navigation",
      "Use proper focus management",
      "Ensure proper screen reader support",
      "Implement proper alt text for images",
      "Use proper form labels",
      "Implement proper error messages",
      "Follow WCAG 2.1 AA guidelines"
    ]
  },
  "filePatterns": {
    "backend": {
      "api": "backend/app/api/**/*.py",
      "models": "backend/app/models/**/*.py",
      "services": "backend/app/services/**/*.py",
      "schemas": "backend/app/schemas/**/*.py",
      "utils": "backend/app/utils/**/*.py",
      "tests": "backend/tests/**/*.py",
      "ai": "backend/app/ai/**/*.py",
      "config": "backend/app/config/**/*.py"
    },
    "frontend": {
      "components": "frontend/src/components/**/*.tsx",
      "pages": "frontend/src/app/**/*.tsx",
      "hooks": "frontend/src/hooks/**/*.ts",
      "utils": "frontend/src/utils/**/*.ts",
      "types": "frontend/src/types/**/*.ts",
      "services": "frontend/src/services/**/*.ts",
      "styles": "frontend/src/styles/**/*.css",
      "lib": "frontend/src/lib/**/*.ts"
    }
  },
  "recommendations": {
    "projectStructure": {
      "backend": [
        "backend/app/",
        "backend/app/api/",
        "backend/app/models/",
        "backend/app/schemas/",
        "backend/app/services/",
        "backend/app/utils/",
        "backend/app/ai/",
        "backend/app/config/",
        "backend/app/middlewares/",
        "backend/tests/",
        "backend/alembic/"
      ],
      "frontend": [
        "frontend/src/app/",
        "frontend/src/components/",
        "frontend/src/hooks/",
        "frontend/src/lib/",
        "frontend/src/styles/",
        "frontend/src/types/",
        "frontend/src/utils/",
        "frontend/public/"
      ]
    },
    "componentsStructure": [
      "frontend/src/components/ui/",
      "frontend/src/components/layout/",
      "frontend/src/components/leads/",
      "frontend/src/components/forms/",
      "frontend/src/components/dashboard/",
      "frontend/src/components/auth/",
      "frontend/src/components/email/",
      "frontend/src/components/calendar/",
      "frontend/src/components/tasks/",
      "frontend/src/components/pipeline/"
    ],
    "databaseTables": [
      "users",
      "teams",
      "leads",
      "pipeline_stages",
      "lead_stage_history",
      "tasks",
      "emails",
      "calls",
      "sms",
      "meetings",
      "notes",
      "activities",
      "integrations",
      "files",
      "tags",
      "lead_tags"
    ],
    "apiEndpoints": [
      {
        "path": "/api/auth",
        "methods": ["POST", "DELETE"],
        "description": "Authentication endpoints"
      },
      {
        "path": "/api/users",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "description": "User management"
      },
      {
        "path": "/api/leads",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "description": "Lead management"
      },
      {
        "path": "/api/leads/import",
        "methods": ["POST"],
        "description": "Lead import with AI parsing"
      },
      {
        "path": "/api/leads/{id}/score",
        "methods": ["GET"],
        "description": "Get AI-generated lead score"
      },
      {
        "path": "/api/communications/email",
        "methods": ["GET", "POST"],
        "description": "Email management"
      },
      {
        "path": "/api/communications/call",
        "methods": ["GET", "POST"],
        "description": "Call management and transcription"
      },
      {
        "path": "/api/communications/sms",
        "methods": ["GET", "POST"],
        "description": "SMS management"
      },
      {
        "path": "/api/tasks",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "description": "Task management"
      },
      {
        "path": "/api/meetings",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "description": "Meeting management"
      },
      {
        "path": "/api/activities",
        "methods": ["GET"],
        "description": "Activity timeline"
      },
      {
        "path": "/api/pipeline",
        "methods": ["GET", "POST", "PUT", "DELETE"],
        "description": "Pipeline stage management"
      },
      {
        "path": "/api/ai/recommend",
        "methods": ["POST"],
        "description": "Get AI recommendations"
      }
    ],
    "uiComponentsLib": [
      {
        "name": "Button",
        "description": "Button component with variants",
        "baseComponent": "@radix-ui/react-slot"
      },
      {
        "name": "Avatar",
        "description": "Avatar component with image fallback",
        "baseComponent": "@radix-ui/react-avatar"
      },
      {
        "name": "Dialog",
        "description": "Modal dialog component",
        "baseComponent": "@radix-ui/react-dialog"
      },
      {
        "name": "Dropdown",
        "description": "Dropdown menu component",
        "baseComponent": "@radix-ui/react-dropdown-menu"
      },
      {
        "name": "Tabs",
        "description": "Tabbed interface component",
        "baseComponent": "@radix-ui/react-tabs"
      },
      {
        "name": "Select",
        "description": "Select dropdown component",
        "baseComponent": "@radix-ui/react-select"
      },
      {
        "name": "Toast",
        "description": "Toast notification component",
        "baseComponent": "@radix-ui/react-toast"
      },
      {
        "name": "NavigationMenu",
        "description": "Navigation menu component",
        "baseComponent": "@radix-ui/react-navigation-menu"
      },
      {
        "name": "Label",
        "description": "Form label component",
        "baseComponent": "@radix-ui/react-label"
      }
    ],
    "hooksLibrary": [
      {
        "name": "useAuth",
        "description": "Hook for authentication state and functions"
      },
      {
        "name": "useLeads",
        "description": "Hook for lead CRUD operations"
      },
      {
        "name": "useTasks",
        "description": "Hook for task management"
      },
      {
        "name": "usePipeline",
        "description": "Hook for pipeline management"
      },
      {
        "name": "useFilters",
        "description": "Hook for data filtering"
      },
      {
        "name": "useSort",
        "description": "Hook for data sorting"
      },
      {
        "name": "usePagination",
        "description": "Hook for data pagination"
      },
      {
        "name": "useForm",
        "description": "Wrapper around React Hook Form"
      },
      {
        "name": "useToast",
        "description": "Hook for toast notifications"
      },
      {
        "name": "useMediaQuery",
        "description": "Hook for responsive design"
      }
    ],
    "aiAgents": [
      {
        "name": "LeadParser",
        "description": "Parses lead data from various formats",
        "technologies": ["langchain", "langchain-openai"]
      },
      {
        "name": "SentimentAnalyzer",
        "description": "Analyzes sentiment in communications",
        "technologies": ["langchain", "langchain-openai"]
      },
      {
        "name": "LeadScorer",
        "description": "Scores leads based on various factors",
        "technologies": ["langchain", "langchain-openai", "langgraph"]
      },
      {
        "name": "ContentGenerator",
        "description": "Generates content for emails and messages",
        "technologies": ["langchain", "langchain-openai"]
      },
      {
        "name": "InteractionAnalyzer",
        "description": "Analyzes interactions with leads",
        "technologies": ["langchain", "langchain-openai", "langgraph"]
      }
    ],
    "dependencies": {
      "backend": {
        "python": ">=3.9,<3.12",
        "fastapi": ">=0.104.1",
        "pydantic": ">=2.4.2",
        "supabase": ">=2.0.0",
        "langchain": ">=0.0.335",
        "langchain-openai": ">=0.0.3",
        "langgraph": ">=0.0.20",
        "openai": ">=1.3.0",
        "sendgrid": ">=6.10.0",
        "twilio": ">=8.10.0"
      },
      "frontend": {
        "next": "15.2.1",
        "react": "^19.0.0",
        "typescript": "^5",
        "tailwindcss": "^4",
        "radix-ui": "latest",
        "tanstack/react-query": "^5.67.1",
        "react-hook-form": "^7.54.2",
        "zod": "^3.24.2",
        "recharts": "^2.15.1",
        "framer-motion": "^12.4.10"
      }
    }
  },
  "environmentSetup": {
    "backend": {
      "requiredVariables": [
        "DATABASE_URL",
        "SUPABASE_URL",
        "SUPABASE_KEY",
        "SECRET_KEY",
        "ALGORITHM",
        "ACCESS_TOKEN_EXPIRE_MINUTES",
        "OPENAI_API_KEY",
        "SENDGRID_API_KEY",
        "TWILIO_ACCOUNT_SID",
        "TWILIO_AUTH_TOKEN",
        "SENTRY_DSN",
        "ENVIRONMENT"
      ],
      "pythonVersion": "3.9"
    },
    "frontend": {
      "requiredVariables": [
        "NEXT_PUBLIC_API_URL",
        "NEXT_PUBLIC_SUPABASE_URL",
        "NEXT_PUBLIC_SUPABASE_ANON_KEY"
      ],
      "nodeVersion": "18"
    }
  },
  "codeTemplates": {
    "apiHooks": {
      "filename": "frontend/src/hooks/use-leads.ts",
      "description": "React Query hook for lead management",
      "template": "import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { toast } from 'sonner';\nimport { Lead, CreateLeadDto, UpdateLeadDto } from '@/types/lead';\nimport { api } from '@/lib/api';\n\nexport const useLeads = () => {\n  const queryClient = useQueryClient();\n\n  const getLeads = useQuery({\n    queryKey: ['leads'],\n    queryFn: async () => {\n      const response = await api.get('/api/leads');\n      return response.data;\n    },\n  });\n\n  const getLead = (id: string) => useQuery({\n    queryKey: ['leads', id],\n    queryFn: async () => {\n      const response = await api.get(`/api/leads/${id}`);\n      return response.data;\n    },\n    enabled: !!id,\n  });\n\n  const createLead = useMutation({\n    mutationFn: async (data: CreateLeadDto) => {\n      const response = await api.post('/api/leads', data);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\n      toast.success('Lead created successfully');\n    },\n    onError: (error) => {\n      toast.error('Failed to create lead');\n      console.error(error);\n    },\n  });\n\n  const updateLead = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: UpdateLeadDto }) => {\n      const response = await api.put(`/api/leads/${id}`, data);\n      return response.data;\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\n      queryClient.invalidateQueries({ queryKey: ['leads', variables.id] });\n      toast.success('Lead updated successfully');\n    },\n    onError: (error) => {\n      toast.error('Failed to update lead');\n      console.error(error);\n    },\n  });\n\n  const deleteLead = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await api.delete(`/api/leads/${id}`);\n      return response.data;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['leads'] });\n      toast.success('Lead deleted successfully');\n    },\n    onError: (error) => {\n      toast.error('Failed to delete lead');\n      console.error(error);\n    },\n  });\n\n  return {\n    getLeads,\n    getLead,\n    createLead,\n    updateLead,\n    deleteLead,\n  };\n};\n"
    },
    "uiComponent": {
      "filename": "frontend/src/components/ui/button.tsx",
      "description": "Button UI component with Radix UI Slot",
      "template": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"underline-offset-4 hover:underline text-primary\",\n      },\n      size: {\n        default: \"h-10 py-2 px-4\",\n        sm: \"h-9 px-3 rounded-md\",\n        lg: \"h-11 px-8 rounded-md\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"
    },
    "leadForm": {
      "filename": "frontend/src/components/leads/lead-form.tsx",
      "description": "Lead form component with React Hook Form and Zod",
      "template": "import * as React from \"react\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from \"sonner\";\nimport { useLeads } from \"@/hooks/use-leads\";\n\nconst leadSchema = z.object({\n  firstName: z.string().min(1, { message: \"First name is required\" }),\n  lastName: z.string().min(1, { message: \"Last name is required\" }),\n  email: z.string().email({ message: \"Invalid email address\" }),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  title: z.string().optional(),\n  source: z.string().optional(),\n});\n\ntype LeadFormValues = z.infer<typeof leadSchema>;\n\ninterface LeadFormProps {\n  onSuccess?: () => void;\n  initialData?: Partial<LeadFormValues>;\n  isEdit?: boolean;\n  id?: string;\n}\n\nexport function LeadForm({ onSuccess, initialData, isEdit, id }: LeadFormProps) {\n  const { createLead, updateLead } = useLeads();\n\n  const form = useForm<LeadFormValues>({\n    resolver: zodResolver(leadSchema),\n    defaultValues: initialData || {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      company: \"\",\n      title: \"\",\n      source: \"\",\n    },\n  });\n\n  function onSubmit(data: LeadFormValues) {\n    if (isEdit && id) {\n      updateLead.mutate(\n        {\n          id,\n          data: {\n            first_name: data.firstName,\n            last_name: data.lastName,\n            email: data.email,\n            phone: data.phone,\n            company: data.company,\n            title: data.title,\n            source: data.source,\n          },\n        },\n        {\n          onSuccess: () => {\n            onSuccess?.();\n          },\n        }\n      );\n    } else {\n      createLead.mutate(\n        {\n          first_name: data.firstName,\n          last_name: data.lastName,\n          email: data.email,\n          phone: data.phone,\n          company: data.company,\n          title: data.title,\n          source: data.source,\n        },\n        {\n          onSuccess: () => {\n            form.reset();\n            onSuccess?.();\n          },\n        }\n      );\n    }\n  }\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"firstName\">First Name</Label>\n          <Input\n            id=\"firstName\"\n            {...form.register(\"firstName\")}\n            aria-invalid={!!form.formState.errors.firstName}\n          />\n          {form.formState.errors.firstName && (\n            <p className=\"text-sm text-red-500\">{form.formState.errors.firstName.message}</p>\n          )}\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"lastName\">Last Name</Label>\n          <Input\n            id=\"lastName\"\n            {...form.register(\"lastName\")}\n            aria-invalid={!!form.formState.errors.lastName}\n          />\n          {form.formState.errors.lastName && (\n            <p className=\"text-sm text-red-500\">{form.formState.errors.lastName.message}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">Email</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          {...form.register(\"email\")}\n          aria-invalid={!!form.formState.errors.email}\n        />\n        {form.formState.errors.email && (\n          <p className=\"text-sm text-red-500\">{form.formState.errors.email.message}</p>\n        )}\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"phone\">Phone</Label>\n        <Input id=\"phone\" {...form.register(\"phone\")} />\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"company\">Company</Label>\n          <Input id=\"company\" {...form.register(\"company\")} />\n        </div>\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"title\">Job Title</Label>\n          <Input id=\"title\" {...form.register(\"title\")} />\n        </div>\n      </div>\n\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"source\">Lead Source</Label>\n        <Select\n          onValueChange={(value) => form.setValue(\"source\", value)}\n          defaultValue={form.getValues(\"source\") || \"\"}\n        >\n          <SelectTrigger>\n            <SelectValue placeholder=\"Select a source\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"website\">Website</SelectItem>\n            <SelectItem value=\"referral\">Referral</SelectItem>\n            <SelectItem value=\"social\">Social Media</SelectItem>\n            <SelectItem value=\"email\">Email Campaign</SelectItem>\n            <SelectItem value=\"event\">Event</SelectItem>\n            <SelectItem value=\"other\">Other</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Button\n        type=\"submit\"\n        className=\"w-full\"\n        disabled={createLead.isPending || updateLead.isPending}\n      >\n        {createLead.isPending || updateLead.isPending\n          ? \"Saving...\"\n          : isEdit\n          ? \"Update Lead\"\n          : \"Create Lead\"}\n      </Button>\n    </form>\n  );\n}\n"
    },
    "dashboardLayout": {
      "filename": "frontend/src/app/(dashboard)/layout.tsx",
      "description": "Dashboard layout component with navigation",
      "template": "import * as React from \"react\";\nimport Link from \"next/link\";\nimport { redirect } from \"next/navigation\";\nimport { UserNav } from \"@/components/layout/user-nav\";\nimport { MainNav } from \"@/components/layout/main-nav\";\nimport { MobileNav } from \"@/components/layout/mobile-nav\";\nimport { ThemeToggle } from \"@/components/layout/theme-toggle\";\n\nexport default async function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // This would be replaced with your actual auth checking logic\n  const isAuthenticated = true;\n\n  if (!isAuthenticated) {\n    redirect(\"/signin\");\n  }\n\n  return (\n    <div className=\"flex min-h-screen flex-col\">\n      <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur\">\n        <div className=\"container flex h-16 items-center justify-between py-4\">\n          <MainNav />\n          <div className=\"flex items-center gap-4\">\n            <ThemeToggle />\n            <UserNav />\n            <MobileNav />\n          </div>\n        </div>\n      </header>\n      <main className=\"flex-1 container py-6\">{children}</main>\n    </div>\n  );\n}\n"
    },
    "apiClient": {
      "filename": "frontend/src/lib/api.ts",
      "description": "API client for making requests to the backend",
      "template": "import axios from \"axios\";\nimport { toast } from \"sonner\";\n\nconst BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\";\n\nexport const api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Request interceptor for adding auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for handling errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const { response } = error;\n\n    if (response?.status === 401) {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/signin\";\n      toast.error(\"Your session has expired. Please sign in again.\");\n    }\n\n    if (response?.status === 403) {\n      toast.error(\"You don't have permission to perform this action.\");\n    }\n\n    if (response?.status === 404) {\n      toast.error(\"Resource not found.\");\n    }\n\n    if (response?.status === 500) {\n      toast.error(\"An unexpected error occurred. Please try again later.\");\n    }\n\n    return Promise.reject(error);\n  }\n);\n"
    },
    "leadParserAgent": {
      "filename": "backend/app/ai/agents/lead_parser.py",
      "description": "LangChain agent for parsing lead data",
      "template": "from typing import Dict, List, Any, Optional\n\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import PydanticOutputParser\nfrom langchain_openai import ChatOpenAI\nfrom pydantic import BaseModel, Field, EmailStr\n\nfrom app.config.settings import settings\n\n\nclass LeadData(BaseModel):\n    \"\"\"Schema for extracted lead information.\"\"\"\n    first_name: str = Field(..., description=\"Lead's first name\")\n    last_name: str = Field(..., description=\"Lead's last name\")\n    email: EmailStr = Field(..., description=\"Lead's email address\")\n    phone: Optional[str] = Field(None, description=\"Lead's phone number\")\n    company: Optional[str] = Field(None, description=\"Lead's company name\")\n    title: Optional[str] = Field(None, description=\"Lead's job title\")\n    source: Optional[str] = Field(None, description=\"How the lead was acquired\")\n\n\nclass LeadParser:\n    \"\"\"Agent for parsing lead data from various formats.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the lead parser agent.\"\"\"\n        self.llm = ChatOpenAI(\n            api_key=settings.OPENAI_API_KEY,\n            model=\"gpt-3.5-turbo\",\n            temperature=0\n        )\n        self.output_parser = PydanticOutputParser(pydantic_object=LeadData)\n\n    def parse_lead_data(self, text: str) -> LeadData:\n        \"\"\"Parse lead data from text.\n\n        Args:\n            text: The text to parse lead data from.\n\n        Returns:\n            A LeadData object with parsed lead data.\n        \"\"\"\n        template = \"\"\"Extract lead information from the following text.\n\n{format_instructions}\n\nText: {text}\n\nExtracted Lead:\"\"\"\n\n        prompt = PromptTemplate(\n            template=template,\n            input_variables=[\"text\"],\n            partial_variables={\n                \"format_instructions\": self.output_parser.get_format_instructions()\n            }\n        )\n\n        chain = prompt | self.llm | self.output_parser\n        return chain.invoke({\"text\": text})\n\n    async def parse_leads_from_file_content(self, file_content: str) -> List[LeadData]:\n        \"\"\"Parse multiple leads from file content.\n\n        This method is useful when dealing with unstructured data or\n        inconsistent file formats.\n\n        Args:\n            file_content: The content of the file to parse leads from.\n\n        Returns:\n            A list of LeadData objects with parsed lead data.\n        \"\"\"\n        # Create a prompt template for extracting multiple leads\n        template = \"\"\"Extract all lead information from the following text.\n        The text may contain information about multiple leads.\n\n        For each lead, extract the following information:\n        - First name\n        - Last name\n        - Email address\n        - Phone number (if available)\n        - Company name (if available)\n        - Job title (if available)\n        - Source (if available)\n\n        {format_instructions}\n\n        Text: {text}\n\n        Extracted Leads:\"\"\"\n\n        # Define a schema for multiple leads\n        class MultipleLeads(BaseModel):\n            leads: List[LeadData] = Field(..., description=\"List of extracted leads\")\n\n        # Create a parser for multiple leads\n        multiple_leads_parser = PydanticOutputParser(pydantic_object=MultipleLeads)\n\n        prompt = PromptTemplate(\n            template=template,\n            input_variables=[\"text\"],\n            partial_variables={\n                \"format_instructions\": multiple_leads_parser.get_format_instructions()\n            }\n        )\n\n        chain = prompt | self.llm | multiple_leads_parser\n        result = await chain.ainvoke({\"text\": file_content})\n        return result.leads\n"
    }
  }
}